Description: 'Optimizing on AWS: CloudFormation'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  StaticBucket:
    Type: "AWS::S3::Bucket"

  StaticBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "StaticBucket"
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${StaticBucket}/static/*"
            Principal: "*"

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt 'AMIInfoFunction.Arn'

  PopulateS3:
    Type: Custom::PopulateS3
    Properties:
      ServiceToken: !GetAtt 'PopulateS3Function.Arn'
      SourceZip: "https://us-west-2-tcdev.s3.amazonaws.com/courses/AWS-100-ADO/v1.0.0/exercises/ex-cr-s3contents.zip"
      DestinationBucket: !Ref StaticBucket

  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub |
              from operator import itemgetter
              import boto3
              import cfnresponse
              def handler(event, context):
                  if event["RequestType"] == "Delete":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, None)
                      return
                  response_status = cfnresponse.FAILED
                  response_data = {}
                  try:
                      ec2 = boto3.client("ec2")
                      response = ec2.describe_images(
                          Filters=[
                              {
                                  "Name": "name",
                                  "Values": ["amzn-ami-hvm*x86_64-gp2"]
                              },
                          ],
                          Owners=["amazon"]
                      )
                      sorted_images = sorted(response["Images"], key=itemgetter("Name"), reverse=True)
                      response_status = cfnresponse.SUCCESS
                      response_data["Id"] = sorted_images[0]["ImageId"]
                  except Exception as e:
                      response_data["Error"] = "Failed finding AMI-ID"
                      print(e)
                  cfnresponse.send(event, context, response_status, response_data)

      Handler: index.handler
      MemorySize: '128'
      Role: !GetAtt 'AMIInfoRole.Arn'
      Runtime: python3.6
      Timeout: '90'

  AMIInfoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'

  PopulateS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub |
              import os
              import mimetypes
              import glob
              import zipfile
              import urllib.request
              import boto3
              import cfnresponse
              def handler(event, context):
                  if event["RequestType"] == "Delete":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, None)
                      return
                  response_status = cfnresponse.FAILED
                  response_data = {}
                  target_dir = "/tmp/zip_contents/"
                  # grab the zip
                  try:
                      source_zip = event["ResourceProperties"]["SourceZip"]
                      destination_bucket = event["ResourceProperties"]["DestinationBucket"]
                      urllib.request.urlretrieve(source_zip, "/tmp/zipfile.zip")
                      # unzip into the tmp folder
                      if not os.path.exists(target_dir):
                          os.makedirs(target_dir)
                      zip_file = zipfile.ZipFile("/tmp/zipfile.zip", "r")
                      zip_file.extractall(target_dir)
                      zip_file.close()
                      # copy the unzipped contents into the destination
                      s3 = boto3.client("s3")
                      for fil in glob.glob(target_dir + "**/*.*", recursive=True):
                          mime_type = mimetypes.guess_type(fil)
                          key = os.path.relpath(fil, target_dir)
                          print("Copying: %s" % key)
                          s3.put_object(
                              Body=open(fil, "rb"),
                              Bucket=destination_bucket,
                              Key=key,
                              ContentType=mime_type[0]
                          )
                      response_status = cfnresponse.SUCCESS
                  except Exception as e:
                      response_data["Error"] = "Failed populating bucket"
                      print(e)
                  cfnresponse.send(event, context, response_status, response_data)
      Handler: index.handler
      MemorySize: '128'
      Role: !GetAtt 'PopulateS3Role.Arn'
      Runtime: python3.6
      Timeout: '90'

  PopulateS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:Put*
                Resource: '*'

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebServerSG
      Tags:
        - Key: Name
          Value: WebServerSG
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: '22'
        #   ToPort: '22'
        #   CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  WebInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT25M
    Properties:
      ImageId: !GetAtt 'AMIInfo.Id'
      Tags:
        - Key: Name
          Value: WebServer
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      SecurityGroupIds:
        - !Ref 'WebServerSG'
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              yum -y update
              yum -y install httpd
              cat > /var/www/html/index.html <<EOF
              <!DOCTYPE html>
              <html lang='en'>
                <head>
                  <title>AWS Developer - Optimizing on AWS</title>
                  <link href='https://${StaticBucket}.s3.amazonaws.com/static/css/bootstrap.min.css' rel='stylesheet'>
                  <link href='https://${StaticBucket}.s3.amazonaws.com/static/css/navbar.css' rel='stylesheet'>
                </head>
                <body>
                  <div class='container'>
                    <div class='jumbotron'><p>Hello - This instance was created with AMI ${AMIInfo.Id}<p></div>
                  </div> <!-- /container -->
                  <script src='https://${StaticBucket}.s3.amazonaws.com/static/js/jquery.min.js'></script>
                  <script src='https://${StaticBucket}.s3.amazonaws.com/static/js/bootstrap.min.js'></script>
                </body>
              </html>
              EOF
              chkconfig httpd on
              service httpd start
              /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource WebInstance  --region ${AWS::Region}


Outputs:
  WebsiteURL:
    Value: !Sub "http://${WebInstance.PublicDnsName}"
